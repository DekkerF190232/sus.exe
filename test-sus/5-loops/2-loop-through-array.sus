struct S1 (
	int32 a,
	int32 b
);

{
	print(s: STR"2-loop-array.sus\n");
	
	print(s: STR"1. arithmetics ====================\n");
	testArithmetics();
	printLn();
	
	print(s: STR"2. loops       ====================\n");
	testLoops();
	printLn();
}

func testLoops() {
	int32 arrSize = 10;
	
	PTR[S1] arr = ARR[S1](arrSize);
	
	# test size
	int32 after = 0;
	int32 arrBytesTest = RTP[int32](REF(after) - arr);
	print(s: STR "expected: 80\n");
	print(i: arrBytesTest);
	printLn();
	
	int32 i = 0;
	while (i < arrSize) {
		PTR[S1] p = arr + (i * size[S1]());
		DRF(p) = S1(
			a = i*2,
			b = i*2 + 1
		);
		
		i = i + 1;
	}
	
	print(s: STR "EXPECTED\n");
	print(s: STR "18 19\n");
	print(s: STR "16 17\n");
	print(s: STR "14 15\n");
	print(s: STR "12 13\n");
	print(s: STR "10 11\n");
	print(s: STR "8 9\n");
	print(s: STR "6 7\n");
	print(s: STR "4 5\n");
	print(s: STR "2 3\n");
	print(s: STR "0 1\n");
	print(s: STR "ACTUAL\n");
	i = arrSize - 1;
	while (i >= 0) {
		PTR[S1] p = arr + (i * size[S1]());
		
		print(i: DRF(p).a);
		print(s: STR " ");
		print(i: DRF(p).b);
		printLn();
		
		i = i - 1;
	}
	
}

func testArithmetics() {
	int32 arrSize = 10;
	
	PTR[S1] arr = ARR[S1](arrSize);
	
	PTR[S1] _0 = arr + (size[S1]() * 0);
	
	if (_0 != arr) print(s: STR "FAILURE\n");
	
	DRF(_0) = S1(a=1, b=2);
	
	print(s: STR"expecting 1 2\n");
	print(i:DRF(_0).a);
	print(s: STR" ");
	print(i:DRF(_0).b);
	printLn();
}

#
# ============================================================================= 
#

func print(boo b) {
  if (b) sus_out_int32(integer:1);
  else sus_out_int32(integer:0);
}

func print(int32 i) {
  sus_out_int32(integer:i);
}

func print(PTR[int8] s) {
  int32 length = 0;
  sus_length(
    buffer: s,
    size: 10000,
    length: REF(length)
  );
  sus_out_buffer(buffer: s, size: length);
}

func printLn() {
  print(s: STR "\n");
}


#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

func sus_out_int32(int32 integer) {
  int32 bufferSize = 128;
  PTR[int8] intBuffer = ARR[int8](bufferSize);
  
  int32 length = 0;
  sus_iota_s(
    value:  integer,
    buffer: intBuffer, 
    size:   bufferSize, 
    radix:  10
  );
  sus_length(
    buffer: intBuffer,
    size: bufferSize,
    length: REF(length)
  );

  sus_out_buffer(buffer: intBuffer, size: length);
}

func sus_out_line() {
  sus_out_buffer(buffer: STR"\n", size:1);
}

func sus_exit(int32 code) {
  ASM {
    extern  _ExitProcess@4
    mov     eax, SUS{code}
    push    eax
    call    _ExitProcess@4
    hlt
  }
}

func sus_length(PTR[int8] buffer, int32 size, PTR[int32] length) {
  ASM {
    extern  _strnlen
    mov     eax, SUS{size}
    push    eax
    mov     eax, SUS{buffer}
    push    eax
    call    _strnlen
    mov     ecx, SUS{length}
    mov     [ecx], eax
  }
}

func sus_iota_s(int32 value, PTR[int8] buffer, int32 size, int32 radix) {
  ASM {
    extern  __itoa_s
    mov     eax, SUS{radix}
    push    eax
    mov     eax, SUS{size}
    push    eax
    mov     eax, SUS{buffer}
    push    eax
    mov     eax, SUS{value}
    push    eax
    call    __itoa_s
  }
}

func sus_out_buffer(PTR[int8] buffer, int32 size) {
  ASM {
      extern  _GetStdHandle@4
      extern  _WriteFile@20
      push    -11
      call    _GetStdHandle@4
      mov     ecx, eax    
      push    0
      push    0
      mov     eax, SUS{size}
      push    eax
      mov     eax, SUS{buffer}
      push    eax
      push    ecx
      call    _WriteFile@20
  }
}