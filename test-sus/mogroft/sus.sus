
package sus/native/Win {

  # strings
  func CON(cdecl) int32 strnlen(PTR[int8] buffer, int32 size) EXT;

  # stdout
  const int32 STD_OUTPUT_HANDLE = -11;
  func CON(stdcall) ExitProcess(int32 code) EXT;
  func CON(stdcall) int32 GetStdHandle(int32 handle) EXT;
  func CON(stdcall) boo WriteFile(int32 file, PTR[int8] buffer, int32 length, PTR[int32] written, PTR[ptr] overlapped) EXT;

  # windows
  struct WindowHandle (int32 _unused);
  func CON(stdcall) ShowWindow(WindowHandle handle, int32 showCommand) EXT;
  
}


package sus/System {

  use sus/native/Win;

  func exit(int32 code) {
    Win/ExitProcess(code: code);
  }

  func print(PTR[int8] s) {
    boo _r = Win/WriteFile(
	    file:       Win/GetStdHandle(handle: Win/STD_OUTPUT_HANDLE),
	    buffer:     s,
	    length:     Win/strnlen(buffer: s, size: 2147483647),
	    written:    RTP[PTR[int32]](0),
	    overlapped: RTP[PTR[ptr]](0)
	  );
  }

  func println(PTR[int8] s) {
    print(s: s);
    print(s: STR"\n");
  }

}
