package mogroft/Texture {

  use sus/native/Win;
  use sus/System;
  use sus/Limits;
  use sus/File;
  use sus/Memory;
  use mogroft/Renderer;
  use sus/Gl;
  
  static int32 txTile1 = -1;
  static int32 txBlocks = -1;
  
  func init() {
    txTile1 = loadTexture(file: STR"assets/tile1.bmp");
    txBlocks = loadTexture(file: STR"assets/blocks.bmp");
  }
  
  # note: using arrays, because of padding
  struct BitmapFileHeader (
    array[int8, 2] bfType,
    array[int8, 4] bfSize,
    array[int8, 2] bfReserved1,
    array[int8, 2] bfReserved2,
    array[int8, 4] bfOffBits
  );
  
  struct BitmapV3InfoHeader (
    int32 biSize,
    int32 biWidth,
    int32 biHeight,
    int32 biPlanes,
    int32 biBitCount,
    int32 biCompression,
    int32 biSizeImage,
    int32 biXPelsPerMeter,
    int32 biYPelsPerMeter,
    int32 biClrUsed,
    int32 biClrImportant
  );
  
  func int32 loadTexture(int32 width, int32 height, PTR[int8] data) {
    int32 textureId = 0;
    Gl/glGenTextures(n: 1, textures: REF(textureId));
    Gl/glBindTexture(target: Gl/GL_TEXTURE_2D, texture: textureId);
    Gl/glTexImage2D(
      target:         Gl/GL_TEXTURE_2D,
      level:          0,
      internalFormat: Gl/GL_RGBA,
      width:          width,
      height:         height,
      border:         0,
      format:         Gl/GL_RGBA,
      type:           Gl/GL_UNSIGNED_BYTE,
      pixels:         RTP[PTR[int8]](data)
    );
    
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_WRAP_S, param: Gl/GL_REPEAT);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_WRAP_T, param: Gl/GL_REPEAT);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_MIN_FILTER, param: Gl/GL_NEAREST);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_MAG_FILTER, param: Gl/GL_LINEAR);
    Gl/glBindTexture(target: Gl/GL_TEXTURE_2D, texture: 0);
    
    done textureId;
  }

  func int32 loadTexture(PTR[int8] file) {
    System/print(s: STR"Loading texture at \"");
    System/print(s: file);
    System/print(s: STR"\"");
    System/println();
    
    int32 width = 0;
    int32 height = 0;

    PTR[int8] fileData = RTP[PTR[int8]](0);
    PTR[int8] pixelData = loadBmpData(file: file, width: REF(width), height: REF(height), fileData: REF(fileData));

    #System/print(i: width);
    #System/println();
    #System/print(i: height);
    #System/println();
    #System/println();
    #System/printBytes(pointer: pixelData, count: 128);
    
    int32 textureId = 0;
    Gl/glGenTextures(n: 1, textures: REF(textureId));
    Gl/glBindTexture(target: Gl/GL_TEXTURE_2D, texture: textureId);
    Gl/glTexImage2D(
      target:         Gl/GL_TEXTURE_2D,
      level:          0,
      internalFormat: Gl/GL_RGBA,
      width:          width,
      height:         height,
      border:         0,
      format:         Gl/GL_RGBA,
      type:           Gl/GL_UNSIGNED_BYTE,
      pixels:         RTP[PTR[int8]](pixelData)
    );
    
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_WRAP_S, param: Gl/GL_REPEAT);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_WRAP_T, param: Gl/GL_REPEAT);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_MIN_FILTER, param: Gl/GL_LINEAR);
    Gl/glTexParameteri(target: Gl/GL_TEXTURE_2D, pname: Gl/GL_TEXTURE_MAG_FILTER, param: Gl/GL_NEAREST);
    Gl/glBindTexture(target: Gl/GL_TEXTURE_2D, texture: 0);
    
    Gl/printError(location: STR"After loading texture");
    
    Memory/free(pointer: RTP[ptr](fileData));
    
    done textureId;
  }

  # loads a bitmapv3 argb 32-bit bmp, here is a guide to create such a file in gimp 2.10.28:
  #   - add an alpha channel to a layer
  #   - set mode to rgb and precision to int8 (default)
  #   - export the image as bmp
  #     - check "do not write color space information"
  #     - select 32 bits a8 r8 g8 b8 (default)
  #
  # - note 1: when reading, this function does not do any checks to see if the buffer was overrun.
  #   additionally, any issue handled (file not found, wrong format) will crash the program.
  # - note 2: the rows are not reversed, which means v texture coordinates are flipped.
  # 
  func PTR[int8] loadBmpData(PTR[int8] file, PTR[int32] width, PTR[int32] height, PTR[PTR[int8]] fileData) {
    PTR[int8] data = RTP[PTR[int8]](0);
    int32 dataLength = File/read(file: file, data: REF(data));

    DRF(fileData) = data;
    
    # read bitmap file header
    PTR[BitmapFileHeader] fileHeader = RTP[PTR[BitmapFileHeader]](data);
    int32 pixelDataOffset = RTP[int32](DRF(fileHeader).bfOffBits);
    
    # check if file is bitmap
    if (cast[int32](RTP[int16](DRF(fileHeader).bfType)) != @4D42) {
      int32 err = Win/GetLastError();
      System/print(s: STR"Not a bitmap file: \"");
      System/print(s: file);
      System/print(s: STR"\"");
      System/println();
      System/exit(code: err);
    }
    
    # read bitmap header v3
    PTR[BitmapV3InfoHeader] infoHeader = RTP[PTR[BitmapV3InfoHeader]](data + size[BitmapFileHeader]());
    int32 infoHeaderLength = DRF(infoHeader).biSize;
    DRF(width) = DRF(infoHeader).biWidth;
    DRF(height) = DRF(infoHeader).biHeight;

    # check header length
    if (infoHeaderLength != 56) {
      System/print(s:STR"Unsupported bitmap info header size: ");
      System/print(i: infoHeaderLength);
      System/println();
      System/exit(code: 1);
    }
    PTR[int8] pixelData = data + pixelDataOffset;

    # convert argb to rgba
    int32 i = 0;
    int32 pixels = DRF(width) * DRF(height);
    while (i < pixels) {
      PTR[int8] base = pixelData + (i * 4);
      
      array[int8, 4] argb = DRF(RTP[PTR[array[int8, 4]]](base));
      
      DRF(base) =   DRF(RTP[PTR[int8]](REF(argb)) + 2);
      DRF(base+1) = DRF(RTP[PTR[int8]](REF(argb)) + 1);
      DRF(base+2) = DRF(RTP[PTR[int8]](REF(argb)) + 0);
      DRF(base+3) = DRF(RTP[PTR[int8]](REF(argb)) + 3);

      i = i + 1;
    }
    
    # flip rows
    {
      int32 end = DRF(height) / 2;
      int32 flipY = 0;
      int32 scanSize = DRF(width) * 4;
      ptr buffer = RTP[ptr](ARR[int8](scanSize));
      while (flipY < end) {
        ptr a = RTP[ptr](pixelData + (flipY * scanSize));
        ptr b = RTP[ptr](pixelData + ((DRF(height) - 1 - flipY) * scanSize));
        int32 _1 = Memory/memcpy_s(
          dest:     buffer,
          destSize: Limits/INT32_MAX,
          source:   a,
          bytes:    scanSize
        );
        int32 _2 = Memory/memcpy_s(
          dest:     a,
          destSize: Limits/INT32_MAX,
          source:   b,
          bytes:    scanSize
        );
        int32 _3 = Memory/memcpy_s(
          dest:     b,
          destSize: Limits/INT32_MAX,
          source:   buffer,
          bytes:    scanSize
        );
        flipY = flipY + 1;
      }
    }

    #System/print(s: STR"Image dump after");
    #System/print(s: file);
    #System/print(s: STR":");
    #System/println();
    #System/printBytes(pointer: pixelData, count: 512);
    #System/println();

    done pixelData;
  }

}