package mogroft/Mogroft {

  use sus/System;
  
  use mogroft/Window;
  use mogroft/Renderer;
  use mogroft/Controls;
  use mogroft/Texture;
  use mogroft/world/World;
  use mogroft/world/Chunk;
  use mogroft/world/WorldManager;
  

  struct MogroftState (
    RendererState rendererState,
    WorldManager worldManager
  );
  
  static PTR[MogroftState] _mogroft = RTP[PTR[MogroftState]](0);
  
  func runMogroft() {
    MogroftState theInst = MogroftState(
      rendererState = Renderer/new_RendererState(),
      worldManager = WorldManager/new(chunkEventHandler: ChunkEventHandler(
        onLoaded = funcref(onChunkLoaded)
      ))
    );
    _mogroft = REF(theInst);
    WorldManager/loadExample(this: REF(theInst.worldManager));
  
    Window/run(windowHandler: WindowHandler(
      render = funcref(render),
      init = funcref(init),
      resize = funcref(resize),
      onKeyDown = funcref(onKeyDown),
      onKeyUp = funcref(onKeyUp),
      onLooseFocus = funcref(onLooseFocus),
      onMouseMove = funcref(onMouseMove),
      onMouseMoveDelta = funcref(onMouseMoveDelta)
    ));
  }
  
  func onMouseMove(int32 x, int32 y) {
    Controls/onMouseMove(x: x, y: y);
  }
  
  func onMouseMoveDelta(int32 dx, int32 dy) {
    Controls/onMouseMoveDelta(dx: dx, dy: dy);
  }
  
  func onChunkLoaded(PTR[Chunk] chunk) {
    #Renderer/onChunLoaded(chunk: chunk);
  }
  
  func init() {
    Controls/init();
    Renderer/init();
    Texture/init();
  }
  
  func render() {
    real32 dt = 1.0 / 100.0; # just assume it's 100 fps lel
    
    Renderer/render(this: REF(DRF(_mogroft).rendererState), dt: dt);
    tick(dt: dt);
  }
  
  func tick(real32 dt) {
    Controls/tick(dt: dt);
  }
  
  func resize(int32 width, int32 height) {
    Renderer/resize(this: REF(DRF(_mogroft).rendererState), width: width, height: height);
  }
  
  func onKeyDown(int32 vk) {
    Controls/onKeyDown(vk: vk);
  }
  
  func onKeyUp(int32 vk) {
    Controls/onKeyUp(vk: vk);
  }
  
  func onLooseFocus() {
    Controls/onLooseFocus();
  }
  
  
}