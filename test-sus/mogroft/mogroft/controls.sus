package mogroft/Controls {

  use sus/System;
  use sus/native/Win;
  use mogroft/world/World;
  use mogroft/Mogroft;
  use mogroft/InputHandlerFly;
  use mogroft/Window;
  
  # KEY BUFFER ==================================================== [
  
  static int32 KEY_BUFFER_SIZE = 128;
  static array[int32, 128] keyArray = array[int32, 128](0);
  static PTR[int32] keyBuffer = RTP[PTR[int32]](0);
  static int32 keysDown = 0;
  
  func int32 findDownKeyIndex(int32 vk) {
    int32 i = keysDown;
    while (i > 0) {
      i = i - 1;
      PTR[int32] item = keyBuffer + (i * size[int32]());
      if (DRF(item) == vk) done i;
    }
    done -1;
  }
  
  func boo isDown(int32 vk) {
    done findDownKeyIndex(vk: vk) != -1;
  }
  
  func boo isCursorGrabbed() {
    done grabbed;
  }
  
  # ] KEY BUFFER

  struct InputHandler(
    funcptr[(real32 dt)] tick,
    funcptr[(int32 vk)] press,
    funcptr[(int32 vk)] release,
    funcptr[(int32 x, int32 y)] mouseMove,
    funcptr[(int32 dx, int32 dy)] mouseMoveDelta,
    funcptr[()] looseFocus
  );
  
  static InputHandler inputHandler = RTP[InputHandler](array[int32, 6](0));
  func init() {
    keyBuffer = RTP[PTR[int32]](REF(keyArray));

    inputHandler = InputHandlerFly/createInputHandler();
  }
  
  func tick(real32 dt) {
    funcptr[(real32 dt)] tickFunc = inputHandler.tick;
    tickFunc(dt: dt);
  }
  
  static boo grabbed = no;
  func setGrabbed(boo grabbed) {
    boo change = grabbed != Controls/grabbed;
    if (change) {
      Controls/grabbed = grabbed;
      Window/setCursorGrabbed(cursorGrabbed: grabbed);
      Window/setCursorVisible(cursorVisible: grabbed == no);
    }
  }

  func onKeyDownInitial(int32 vk) {
    funcptr[(int32 vk)] pressFunc = inputHandler.press;
    pressFunc(vk: vk);
    
    if (vk == Win/VK_ESCAPE) {
      setGrabbed(grabbed: no);
    } else if (vk == Win/VK_LBUTTON) {
      setGrabbed(grabbed: yes);
    }
  }
  
  func onMouseMove(int32 x, int32 y) {
    
  }
  
  func onMouseMoveDelta(int32 dx, int32 dy) {
    funcptr[(int32 dx, int32 dy)] mouseMoveDeltaFunc = inputHandler.mouseMoveDelta;
    mouseMoveDeltaFunc(dx: dx, dy: dy);
  }

  func onKeyDown(int32 vk) {
    # add down key
    int32 index = findDownKeyIndex(vk: vk);
    if ((index == -1) && (keysDown <= KEY_BUFFER_SIZE)) {
      onKeyDownInitial(vk: vk);
      DRF(keyBuffer + (keysDown * size[int32]())) = vk;
      keysDown = keysDown + 1;
    }
  }
  
  func onKeyUp(int32 vk) {
    int32 index = findDownKeyIndex(vk: vk);
    if (index == -1) done;
    
    # remove down key
    int32 i = index;
    while (i < (keysDown - 1)) {
      PTR[int32] current = keyBuffer + (i * size[int32]());
      PTR[int32] next = current + size[int32]();
      DRF(current) = DRF(next);
      i = i + 1;
    }
    keysDown = keysDown - 1;
  }
  
  func onLooseFocus() {
    keysDown = 0;
    setGrabbed(grabbed: no);
  }
  
  #func printBuff() {
  #  int32 i = keysDown;
  #  System/println(s: STR"down keys:");
  #  while (i > 0) {
  #    i = i - 1;
  #    PTR[int32] current = keyBuffer + (i * size[int32]());
  #    System/print(s: STR" ");
  #    System/print(i: DRF(current));
  #  }
  #  System/println();
  #}

}

package mogroft/InputHandlerFly {

  use mogroft/Controls;
  use mogroft/algebra/Vec3;
  use sus/System;
  use sus/native/Win;
  use mogroft/world/World;
  use mogroft/world/Player;
  use mogroft/Mogroft;
  
  use mogroft/Settings;

  func InputHandler createInputHandler() {
    done InputHandler(
      tick = funcref(tick),
      press = funcref(press),
      release = funcref(release),
      looseFocus = funcref(looseFocus),
      mouseMove = funcref(mouseMove),
      mouseMoveDelta = funcref(mouseMoveDelta)
    );
  }
  
  func mouseMoveDelta(int32 dx, int32 dy) {
    if (Controls/isCursorGrabbed() == no) done;
    
    # how many pixels does the mouse have to move for the player to turn around 360Â°
    real32 fullRotationPx = 1920.0 * 2.5; 
    
    real32 deltaYaw = cast[real32](dx) / fullRotationPx * -360.0;
    real32 deltaPitch = cast[real32](dy) / fullRotationPx * -360.0;
    
    PTR[World] world = DRF(Mogroft/_mogroft).worldManager.world;
    Player/lookDelta(this: REF(DRF(world).player), dyaw: deltaYaw, dpitch: deltaPitch);
    
    #System/print(s: STR"player look: ");
    #System/print(r: DRF(world).player.yaw, digits: 0);
    #System/print(s: STR" ");
    #System/print(r: DRF(world).player.pitch, digits: 0);
    #System/println();
  }
  
  func tick(real32 dt) {
    if (Controls/isCursorGrabbed() == no) done;
  
    # 'WASD'.split('').map(x => x.charCodeAt(0).toString(16))
    # Array(4) [ "57", "41", "53", "44" ]
    int32 vkW = @57; # also could use DRF(STR"A")
    int32 vkA = @41;
    int32 vkS = @53;
    int32 vkD = @44;
    
    Vec3 wanted = Vec3(x=0.0, y=0.0, z=0.0);
    if (Controls/isDown(vk: vkW))           wanted.z  = wanted.z - 1.0;
    if (Controls/isDown(vk: vkS))           wanted.z  = wanted.z + 1.0;
    if (Controls/isDown(vk: vkD))           wanted.x  = wanted.x + 1.0;
    if (Controls/isDown(vk: vkA))           wanted.x  = wanted.x - 1.0;
    
    PTR[World] world = DRF(Mogroft/_mogroft).worldManager.world;
    real32 yaw = DRF(world).player.yaw;
    
    # rotate about view
    
    Vec3/rotate(this: REF(wanted), angle: yaw, v: Vec3(x=0.0, y = 1.0,z=0.0)); 
    
    
    if (Controls/isDown(vk: Win/VK_SHIFT))  wanted.y  = wanted.y - 1.0;
    if (Controls/isDown(vk: Win/VK_SPACE))  wanted.y  = wanted.y + 1.0;
    
    real32 speed = 10.0;
    if (Controls/isDown(vk: Win/VK_CONTROL)) speed = speed * 10.0;
    
    DRF(world).player.position.z = DRF(world).player.position.z + (dt * speed * wanted.z);
    DRF(world).player.position.y = DRF(world).player.position.y + (dt * speed * wanted.y);
    DRF(world).player.position.x = DRF(world).player.position.x + (dt * speed * wanted.x);
  }
  
  func press(int32 vk) {
    int32 vkL = 76;
    if (vk == vkL) {
      Settings/inst.lighting = Settings/inst.lighting == no;
      #Settings/inst.lighting = yes;
      #System/printBytes(
      #  pointer: RTP[PTR[int8]](REF(Settings/inst.lighting)),
      #  count: 4
      #);
      System/print(s: STR"LIGHTING: ");
      System/print(b: Settings/inst.lighting);
      #System/println(b: Settings/inst.lighting);
      #System/print(b: yes);
      #System/print(b: no);
      #System/println();
    }
  }
  
  func mouseMove(int32 x, int32 y) {}
  func release(int32 vk) {}
  func looseFocus() {}
  
}