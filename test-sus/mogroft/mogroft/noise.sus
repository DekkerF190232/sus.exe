# https://de.wikipedia.org/wiki/Perlin-Noise

package mogroft/Noise2D {

  use sus/Math;
  use mogroft/algebra/Vec2;
  
  func int32 hash(int32 x) {  
    int8 w = cast[int8](8 * size[int32]());
    int8 m = cast[int8](4 * size[int32]());
    int8 wmm = cast[int8](cast[int32](w) - cast[int32](m));
    int32 k = @131131;
    k = k ^ (k >> wmm); 
    done (x * k) >> (wmm);
  }

  func real32 interpolate(real32 a0, real32 a1, real32 x)
  {
    real32 g = (3.0 - (x * 2.0)) * x * x; # kubische Interpolation mit dem Polynom 3 * x^2 - 2 * x^3
    done (a1 - a0) * g + a0;
  }
  
  func real32 dotGridGradient(int32 ix, int32 iy, real32 x, real32 y, int32 hash)
  {
    Vec2 grad = randomGradient(ix: ix, iy: iy, hash: hash);
    real32 dx = x - cast[real32](ix);
    real32 dy = y - cast[real32](iy);
    done dx * grad.x + dy * grad.y; # Skalarprodukt
  }
  
  func Vec2 randomGradient(int32 ix, int32 iy, int32 hash)
  {
    int8 w = cast[int8](8 * size[int32]());
    int8 s = cast[int8](4 * size[int32]());
    int8 wms = cast[int8](cast[int32](w) - cast[int32](s));
    
    int32 a = ix;
    int32 b = iy;
    a = a * 3284157443;
    b = b * ((a << s) | (a >> (wms)));
    b = b * 1911520717;
    a = a ^ ((b << s) | (b >> (wms)));
    a = a * 2048419325;
    
    a = a ^ hash;
    b = b ^ hash;
    
    real32 random = cast[real32](a) * Math/PI / cast[real32](~(~0 >> cast[int8](1))); 
    
    done Vec2(
      x = Math/cosf(x: random),
      y = Math/sinf(x: random)
    );
  }
  
  func real32 perlin(real32 x, real32 y, int32 seed) {
    real32 r = perlinUnnorm(x: x, y: y, seed: seed);
    r = (r + 0.7071068) / 1.4142137;
    if (r < 0.0000001) done 0.0000001;
    if (r > 0.9999999) done 0.9999999;
    done r;
  }
  
  func real32 perlinUnnorm(real32 x, real32 y, int32 seed)
  {
    int32 hash = Noise2D/hash(x: seed);
    
    int32 x0 = cast[int32](Math/floorf(x: x));
    int32 x1 = x0 + 1;
    int32 y0 = cast[int32](Math/floorf(x: y));
    int32 y1 = y0 + 1;

    real32 sx = x - cast[real32](x0);
    real32 sy = y - cast[real32](y0);

    real32 n0 = dotGridGradient(ix: x0, iy: y0, x:x, y:y, hash: hash);
    real32 n1 = dotGridGradient(ix: x1, iy: y0, x:x, y:y, hash: hash);
    real32 ix0 = interpolate(a0: n0, a1: n1, x: sx);
    n0 = dotGridGradient(ix: x0, iy: y1, x: x, y: y, hash: hash);
    n1 = dotGridGradient(ix: x1, iy: y1, x: x, y: y, hash: hash);
    real32 ix1 = interpolate(a0: n0, a1: n1, x: sx);

    done interpolate(a0: ix0, a1: ix1, x: sy);
  }

}

package mogroft/Noise2DFractal {

  use mogroft/Noise2D;
  
  func int32 hash(int32 x) {  
    int8 w = cast[int8](8 * size[int32]());
    int8 m = cast[int8](4 * size[int32]());
    int8 wmm = cast[int8](cast[int32](w) - cast[int32](m));
    int32 k = @63433498;
    k = k ^ (k >> wmm); 
    done (x * k) >> (wmm);
  }
  
  func real32 noise(real32 x, real32 y, int32 levels, int32 seed) {
    int32 i = 0;
    real32 result = 0.0;
    while (i < levels) {
      int32 hash = Noise2DFractal/hash(x: seed + i);
      result = result + (Noise2D/perlin(x: x, y: y, seed: hash) / cast[real32](levels));
      x = x * 0.5;
      y = y * 0.5;
      i = i + 1;
    }
    done result;
  }
  
}