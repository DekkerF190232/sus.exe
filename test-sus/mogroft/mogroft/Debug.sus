package Debug {

  use sus/Time;
  use sus/List;
  use sus/System;
  use sus/Memory;
  use sus/Math;

  use mogroft/Mogroft;
  use mogroft/PlayerController;
  
  use mogroft/algebra/Vec3i;
  
  use mogroft/world/World;
  use mogroft/world/Block;
  use mogroft/world/Blocks;
  use mogroft/world/Chunk;
  use mogroft/world/WorldManager;
  
  static int32 REPORT_INTERVAL_MS = 2000;
  
  static Time timeReport = Time(_low=cast[nat32](0),_high=cast[nat32](0));
  
  static int32 FPS_MEASURE_INTERVAL_MS = 500;
  struct Debug (
    List deltaHistory
  );
  
  static PTR[Debug] data = RTP[PTR[Debug]](0);
  
  static boo critical = no; # flag used for debugging
  
  func test() {
    System/println(s: STR"debug test() start=========================================");
    critical = yes;
    
    PTR[MogroftState] mogroft = Mogroft/_mogroft;
    PTR[WorldManager] worldManager = REF(DRF(mogroft).worldManager);
    PTR[PlayerController] playerController = REF(DRF(mogroft).playerController);
    PTR[World] world = DRF(worldManager).world;
    
    PlayerController/tick(this: playerController, dt: 1.0 / 100.0);
  
    int32 bx = DRF(playerController).hoveredBlock.x; #Math/floori(x: DRF(world).player.position.x);
    int32 by = DRF(playerController).hoveredBlock.y; #Math/floori(x: DRF(world).player.position.y) - 2;
    int32 bz = DRF(playerController).hoveredBlock.z; #Math/floori(x: DRF(world).player.position.z);
    
    PTR[Block] block = World/tryGet(this: world, x: bx, y: by, z: bz);

    System/print(s: STR"Current Block: (");
    System/print(i: bx);
    System/print(s: STR",");
    System/print(i: by);
    System/print(s: STR",");
    System/print(i: bz);
    System/print(s: STR") ");
    
    if (RTP[int32](block) == 0)
      System/print(s: STR"*null*");
    else {
      System/print(s: STR"ID=");
      System/print(i: cast[int32](DRF(block).id));
    }
    
    System/println();
  
    System/fatal(reason: STR"crash after test()");
  }
  
  func init() {
    data = RTP[PTR[Debug]](Memory/malloc(bytes: size[Debug]()));
    DRF(data) = Debug(
      deltaHistory = List/alloc(elementSize: size[Debug]())
    );
  }

  func tick(real32 dt) {
    Time now = Time/now();
    
    if (Time/greater(t: Time/sub(a: now, b: timeReport), ms: REPORT_INTERVAL_MS)) {
      doReport();
      timeReport = now;
    }
  }
  
  func doReport() {
    #done;
    
    PTR[MogroftState] mogroft = Mogroft/_mogroft;
    PTR[WorldManager] worldManager = REF(DRF(mogroft).worldManager);
    PTR[World] world = DRF(worldManager).world;
    
    #System/println(s: STR"=================================== [Debug Report] ===================================");
    #System/println(s: STR"--------------------------------------------------------------------------------------");
    
    System/print(s: STR"    Loaded: ");
    System/print(i: DRF(world).chunkList.list.length);
    System/print(s: STR" Enqueued: ");
    System/print(i: DRF(worldManager)._queue.list.length);
    System/println();
    
    System/print(s: STR"    XYZ: ");
    System/print(i: cast[int32](DRF(world).player.position.x));
    System/print(s: STR",");
    System/print(i: cast[int32](DRF(world).player.position.y));
    System/print(s: STR",");
    System/print(i: cast[int32](DRF(world).player.position.z));
    
    System/println();
  }

}