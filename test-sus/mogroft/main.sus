package Main {

  use sus/System;
  use sus/native/Win;
  
  main {
    boo _1 = Win/AttachConsole(processId: Win/ATTACH_PARENT_PROCESS);
    Test/runTest();
    
    System/println(s:STR"Starting mogroft written in sus.exe\n");
    
    mogroft/Mogroft/runMogroft();
    
    System/println(s: STR"Closing normally.");
    #int32 err = Win/GetLastError();
    #System/print(s: STR"Last Error: ");
    #System/print(i: err);
    #System/print(s: STR" (0x");
    #System/print(i_0x: err);
    #System/print(s: STR")\n");
    #System/exit(code: err);

    System/exit(code: 0);
    
  }

}


package Test {

  use sus/System;
  use sus/Memory;
  use sus/Limits;
  use mogroft/Noise2D;
  use mogroft/Noise2DFractal;
  use mogroft/algebra/Vec3;
  use sus/Math;

  func runTest() {
    done;
    System/println(s: STR"==============================================================================");
    System/println(s: STR"Running Tests...");
    doTest();
    System/println(s: STR"------------------------------------------------------------------------------");
    System/exit(code: 0);
 }
  
  func doTest() {
    testNoise();
    #testHash();
  }

  func testHash() {
    #int32 i = 0;
    #while (i < 50) {
    #  System/println(i: Noise2D/hash(x: i));
    #  i = i + 1;
    #}
  }
  
  func testNoise() {
    real32 scale = 0.2;
    int32 off = -10;
    
    int32 r = 0;
    while (r < 40) {
      int32 c = 0;
      while (c < 55) {
        real32 val = Noise2DFractal/noise(
          x: cast[real32](c + off) * scale,
          y: cast[real32](r + off) * scale,
          levels: 3,
          seed: 0
        );
        
        PTR[int8] characters = STR"@O+-.  ";
        int32 characterCount = 6;
        int32 idx = cast[int32](val * cast[real32](characterCount));
        PTR[int8] char = characters + idx;
        
        System/print(s: char, length: 1); 
        System/print(s: STR" ");
        
        c = c + 1;
      }
      System/println();
      r = r + 1;
    }
  }
  
}