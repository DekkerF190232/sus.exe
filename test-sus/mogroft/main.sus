package Main {

  use sus/System;
  use sus/native/Win;


  main {
    System/println(s:STR"Starting mogroft compiled using sus.exe\n");
    
    Window/run();
    
    System/println(s:STR"Exiting.");
    
    int32 err = Win/GetLastError();
    System/print(s: STR"Last Error: ");
    System/print(i: err);
    System/print(s: STR" (0x");
    System/print(i_0x: err);
    System/print(s: STR")\n");
      
    System/exit(code: 0);
    
  }

}

package Window {
  
  use mogroft/Renderer;
  use sus/native/Win;
  use sus/System;

  struct Window (
    WindowHandle windowHandle,
    DeviceContextHandle deviceContextHandle,
    GlRenderContextHandle glRenderContextHandle,
    RenderState renderState
  );

  static PTR[Window] _window = RTP[PTR[Window]](0);

  func run() {
    Window window = Window(
      windowHandle=RTP[WindowHandle](0),
      deviceContextHandle=RTP[DeviceContextHandle](0),
      glRenderContextHandle=RTP[GlRenderContextHandle](0),
      renderState = Renderer/def_RenderState
    );
    _window = REF(window);
    
    # make window
    registerClass();
    createWindow(this: REF(window));
    
    # show window
    boo _1 = Win/ShowWindow(handle: window.windowHandle, showCommand: Win/SW_SHOWNORMAL);
    boo _2 = Win/UpdateWindow(handle: window.windowHandle);

    # create opengl context
    createContext(this: REF(window));
    
    # use context
    boo _3 = Win/wglMakeCurrent(dch: window.deviceContextHandle, glRenderContextHandle: window.glRenderContextHandle);
    if (_3 == no) {
      int32 err = Win/GetLastError();
      errMsg(code: err, message: STR"Error setting window context:");
      System/exit(code: err);
    }
     
    runMessageLoop(this: REF(window));
  }

  
  func createContext(PTR[Window] this) {
    DRF(this).deviceContextHandle = Win/GetDC(handle: DRF(this).windowHandle);
    
    if (RTP[int32](DRF(this).deviceContextHandle) == 0) {
      int32 err = Win/GetLastError();
      errMsg(code: err, message: STR"Error loading icon:");
      System/exit(code: err);
    }

    # chose pixel format
    PixelFormatDescriptor pfd = Win/new_PixelFormatDescriptor();
    pfd.size        = cast[int16](size[PixelFormatDescriptor]());
    pfd.version     = cast[int16](1);
    pfd.flags       = Win/PFD_DRAW_TO_WINDOW | Win/PFD_SUPPORT_OPENGL;
    pfd.pixelType   = Win/fc_PFD_TYPE_RGBA();
    pfd.colorBits   = cast[int8](32);
    pfd.alphaBits   = cast[int8](32);
    pfd.depthBits   = cast[int8](24);
    int32 pixelFormat = Win/ChoosePixelFormat(
      dch: DRF(this).deviceContextHandle,
      pfd: REF(pfd)
    );
    if (pixelFormat == 0) {
      int32 err = Win/GetLastError();
      errMsg(code: err, message: STR"Error choosing pixel format:");
      System/exit(code: err);
    }
    
    # set pixel format
    boo _1 = Win/SetPixelFormat(dch: DRF(this).deviceContextHandle, format: pixelFormat, pfd: REF(pfd));
    if (_1 == no) {
      int32 err = Win/GetLastError();
      errMsg(code: err, message: STR"Error setting pixel format:");
      System/exit(code: err);
    }
    
    # create context
    DRF(this).glRenderContextHandle = Win/wglCreateContext(dch: DRF(this).deviceContextHandle);
    if (RTP[int32](DRF(this).glRenderContextHandle) == 0) {
      int32 err = Win/GetLastError();
      errMsg(code: err, message: STR"Error setting pixel format:");
      System/exit(code: err);
    }
  }

  func runMessageLoop(PTR[Window] this) {
    WindowMessage message = Win/new_WindowMessage();
    
    while (Win/GetMessageA(
      message:   REF(message),
      handle:    DRF(this).windowHandle,
      filterMin: 0,
      filterMax: 0
    )) {
      boo   _1 = Win/TranslateMessage(message: REF(message));
      int32 _2 = Win/DispatchMessageA(message: REF(message));
    }
  }

  func CON(stdcall) int32 windowProc(WindowHandle handle, int32 message, int32 wParam, int32 lParam) {
    if (message == Win/WM_PAINT) {
      PaintStruct ps = Win/new_PaintStruct();
      
      DeviceContextHandle _1 = Win/BeginPaint(handle: handle, paintStruct: REF(ps));
      DeviceContextHandle _2 = Win/EndPaint(handle: handle, paintStruct: REF(ps));
      
      done 0;
    } else if (message == Win/WM_SIZE) {
      int32 width = lParam & @ffff;
      int32 height = lParam >> cast[int8](16) & @ffff;
      
      Renderer/resize(this: REF(DRF(_window).renderState), width: width, height: height);
      
      #System/print(s: STR"size: ");
      #System/print(i: width);
      #System/print(s: STR", ");
      #System/println(i: height);

      done 0;
    }
  
    done Win/DefWindowProcA(handle: handle, message:message, wParam: wParam, lParam: lParam);
  }

  func registerClass() {
    int32 err = 0;

    Win/SetLastError(code:0);

    InstanceHandle instance = RTP[InstanceHandle](0);

    # load icon
    IconHandle icon = Win/LoadIconA(instance: instance, iconName: Win/fc_IDI_WINLOGO());
    err = Win/GetLastError();
    if (err != 0) {
      errMsg(code: err, message: STR"Error loading icon: ");
      System/exit(code: err);
    }

    CursorHandle cursor = Win/LoadCursorA(instance: instance, cursorName: Win/fc_IDC_ARROW());
    err = Win/GetLastError();
    if (err != 0) {
      errMsg(code: err, message: STR"Error loading icon: ");
      System/exit(code: err);
    }

    WindowClassExtendedAscii windowClass = WindowClassExtendedAscii(
      cbSize     = size[WindowClassExtendedAscii](),
      style      = Win/CS_OWNDC | Win/CS_HREDRAW | Win/CS_VREDRAW | Win/CS_DBLCLKS,
      windowProc = funcref(windowProc),
      cbClsExt = 0,
      cbWndExt = 0,
      instance   = instance,
      icon       = icon,
      cursor     = cursor,
      background = RTP[BrushHandle](0),
      menuName   = RTP[PTR[int8]](0),
      className  = STR"Mogroft",
      iconSmall  = RTP[IconHandle](0)
    );

    int32 _ignored = cast[int32](Win/RegisterClassExA(windowClass: REF(windowClass)));
    err = Win/GetLastError();
    if (err != 0) {
      errMsg(code: err, message: STR"Error registering class: ");
      System/exit(code: err);
    }
  }

  func createWindow(PTR[Window] this) {
    int32 style = Win/fc_WS_OVERLAPPEDWINDOW()|Win/WS_CLIPSIBLINGS|Win/WS_CLIPCHILDREN;
    
    Rectangle rectangle = Rectangle(
      left = 100,
      top = 100,
      right = 600,
      bottom = 600
    );

    boo res = Win/AdjustWindowRect(
      rectangle: REF(rectangle),
      style:     style, menu: no
    );

    DRF(this).windowHandle = Win/CreateWindowExA(
      extendedStyle: 0,
      className:     STR"Mogroft",
      windowName:    STR"Mogroft sus.exe",
      style:         style,
      x:             0,
      y:             0,
      width:         500,
      height:        500,
      parentHandle:  RTP[WindowHandle](0),
      menu:          RTP[MenuHandle](0),
      instance:      RTP[InstanceHandle](0),
      param:         RTP[ptr](0)
    );

    if (RTP[int32](DRF(this).windowHandle) == 0) {
      int32 code = Win/GetLastError();
      errMsg(code: code, message: STR"Failed to create window. GetLastError: ");
      System/exit(code: code);
    }

  }

  func errMsg(int32 code, PTR[int8] message) {
    System/print(s: message);
    System/print(s: STR" ");

    System/print(i: code);
    System/print(s: STR" = 0x");

    System/println(i_0x: code);
  }

}