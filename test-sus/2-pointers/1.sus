{
    PTR[int8] str = STR"Hello, World!\n";
    PTR[int8] buffer = ARR[int8](10); # Array operator: reserves array in scope and returns pointer to first element

    int32 a = 14;
    int32 b = 14;
    int32 len = 14;

    out(message: STR"a+b=");
}

#func add(int32 a, int32 b, PTR[int32] r) {
#    [r] = a + b; # Assignments: Accepts Assignable expression and expression
#}

#
# my default library (c functions and winapi calls in inline assembly lel)
#

func exit(int32 code) {
   ASM {
    extern  _ExitProcess@4
    mov eax, SUS{code}
    push    eax
    call    _ExitProcess@4
    hlt
   }
}

func iota(int32 value, PTR[int8] buffer, int32 size, int32 radix) {
    ASM {
        extern  __itoa_s
        mov     eax, SUS{radix}
        push    eax
        mov     eax, SUS{size}
        push    eax
        mov     eax, SUS{buffer}
        push    eax
        mov     eax, SUS{value}
        push    eax
        call    __itoa_s
    }
}

#func strnlen(PTR[int8] str, int32 size, PTR[int32] len) {
#    int32 res = 0;
#    ASM {
#        extern  _strnlen
#        mov     eax, SUS{size}
#        push    eax
#        mov     eax, SUS{str}
#        push    eax
#        call    _strnlen
#        mov     SUS{res}, eax
#    }
#    [len] = res;
#}

func out(PTR[int8] message) {
    #int32 len = 0;
    # strnlen(str: str, size: 1024, ADR(len)); # TODO: find method where i dont need size
    int32 size = 100;
    ASM {
        extern  _GetStdHandle@4
        extern  _WriteFile@20

        push    -11
        call    _GetStdHandle@4
        mov     ecx, eax    
        push    0
        push    0
        mov     eax, SUS{size}
        push    eax
        mov     eax, SUS{message}
        push    eax
        push    ecx
        call    _WriteFile@20
    }
}