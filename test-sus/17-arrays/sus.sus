
package sus/native/Win {

  # math
  func CON(cdecl) real32 powf(real32 base, real32 power) EXT;
  func CON(cdecl) int32 pow(int32 base, int32 power) EXT;

  # strings
  func CON(cdecl) int32 strnlen(PTR[int8] buffer, int32 size) EXT;
  func CON(cdecl) _itoa_s(int32 value, PTR[int8] buffer, int32 size, int32 radix) EXT;

  # stdout
  const int32 STD_OUTPUT_HANDLE = -11;
  func CON(stdcall) ExitProcess(int32 code) EXT;
  func CON(stdcall) int32 GetStdHandle(int32 handle) EXT;
  func CON(stdcall) boo WriteFile(int32 file, PTR[int8] buffer, int32 length, PTR[int32] written, PTR[ptr] overlapped) EXT;

  # errors
  func CON(stdcall) SetLastError(int32 code) EXT;
  func CON(stdcall) int32 GetLastError() EXT;

  # threads
  func CON(stdcall) Sleep(int32 ms) EXT;

  # windows

  struct Rectangle (
    int32 left,
    int32 top,
    int32 right,
    int32 bottom
  );

  func CON(stdcall) boo AdjustWindowRect(PTR[Rectangle] rectangle, int32 style, boo menu) EXT;

  func CON(stdcall) WindowHandle CreateWindowExA(
    int32 extendedStyle,
    PTR[int8] className,
    PTR[int8] windowName,
    int32 style,
    int32 x,
    int32 y,
    int32 width,
    int32 height,
    WindowHandle parentHandle,
    MenuHandle menu,
    InstanceHandle instance,
    ptr param) EXT;

  const int32 WS_OVERLAPPED       = @00000000;
  const int32 WS_POPUP            = @80000000;
  const int32 WS_CHILD            = @40000000;
  const int32 WS_MINIMIZE         = @20000000;
  const int32 WS_VISIBLE          = @10000000;
  const int32 WS_DISABLED         = @08000000;
  const int32 WS_CLIPSIBLINGS     = @04000000;
  const int32 WS_CLIPCHILDREN     = @02000000;
  const int32 WS_MAXIMIZE         = @01000000;
  const int32 WS_CAPTION          = @00C00000;
  const int32 WS_BORDER           = @00800000;
  const int32 WS_DLGFRAME         = @00400000;
  const int32 WS_VSCROLL          = @00200000;
  const int32 WS_HSCROLL          = @00100000;
  const int32 WS_SYSMENU          = @00080000;
  const int32 WS_THICKFRAME       = @00040000;
  const int32 WS_GROUP            = @00020000;
  const int32 WS_TABSTOP          = @00010000;
  const int32 WS_MINIMIZEBOX      = @00020000;
  const int32 WS_MAXIMIZEBOX      = @00010000;

  func int32 fc_WS_OVERLAPPEDWINDOW() {
    done WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
  }

  const int32 CS_VREDRAW          = @0001;
  const int32 CS_HREDRAW          = @0002;
  const int32 CS_DBLCLKS          = @0008;
  const int32 CS_OWNDC            = @0020;
  const int32 CS_CLASSDC          = @0040;
  const int32 CS_PARENTDC         = @0080;
  const int32 CS_NOCLOSE          = @0200;
  const int32 CS_SAVEBITS         = @0800;
  const int32 CS_BYTEALIGNCLIENT  = @1000;
  const int32 CS_BYTEALIGNWINDOW  = @2000;
  const int32 CS_GLOBALCLASS      = @4000;

  const int32 SWP_NOSIZE          = @0001;
  const int32 SWP_NOMOVE          = @0002;
  const int32 SWP_NOZORDER        = @0004;
  const int32 SWP_NOREDRAW        = @0008;
  const int32 SWP_NOACTIVATE      = @0010;
  const int32 SWP_FRAMECHANGED    = @0020;
  const int32 SWP_SHOWWINDOW      = @0040;
  const int32 SWP_HIDEWINDOW      = @0080;
  const int32 SWP_NOCOPYBITS      = @0100;
  const int32 SWP_NOOWNERZORDER   = @0200;
  const int32 SWP_NOSENDCHANGING  = @0400;
 
  const int32 SW_SHOWNORMAL = 1;

  struct InstanceHandle (int32 _unused);
  struct WindowHandle (int32 _unused);
  struct MenuHandle (int32 _unused);
  struct IconHandle (int32 _unused);
  struct CursorHandle (int32 _unused);
  struct BrushHandle (int32 _unused);

  func PTR[int8] fc_IDI_WINLOGO() { done RTP[PTR[int8]](32517); }
  func PTR[int8] fc_IDC_ARROW() { done RTP[PTR[int8]](32512); }

  func CON(stdcall) IconHandle LoadIconA(InstanceHandle instance, PTR[int8] iconName) EXT;

  func CON(stdcall) CursorHandle LoadCursorA(InstanceHandle instance, PTR[int8] cursorName) EXT;

  func CON(stdcall) int32 DefWindowProcA(WindowHandle handle, int32 message, int32 wParam, int32 lParam) EXT;

  struct WindowClassExtendedAscii (
    int32 cbSize,
    int32 style,
    funcptr[CON(stdcall) int32 (WindowHandle handle, int32 message, int32 wParam, int32 lParam)] 
         windowProc,
    int32 cbClsExt,
    int32 cbWndExt,
    InstanceHandle instance,
    IconHandle icon,
    CursorHandle cursor,
    BrushHandle background,
    PTR[int8] menuName,
    PTR[int8] className,
    IconHandle iconSmall
  );
  func CON(stdcall) boo ShowWindow(WindowHandle handle, int32 showCommand) EXT;
  func CON(stdcall) int16 RegisterClassExA(PTR[WindowClassExtendedAscii] windowClass) EXT;

  func CON(stdcall) boo SetWindowPos(
      WindowHandle handle,
      WindowHandle handleInsertAfter,
      int32 x,
      int32 y,
      int32 cx,
      int32 cy,
      int32 flags) EXT;

  struct Point (
    int32 x,
    int32 y
  );

  struct WindowMessage (
    WindowHandle handle,
    int32 message,
    int32 wParam,
    int32 lParam,
    int32 time,
    Point point
  );
  func WindowMessage new_WindowMessage() {
    done WindowMessage(
      handle = RTP[WindowHandle](0),
      message = 0,
      wParam = 0,
      lParam = 0,
      time = 0,
      point = Point(x = 0, y = 0)
    );
  }
  
  const int32 WM_PAINT          = @000f;
  const int32 WM_SIZE           = @0005;
  const int32 WM_KEYDOWN        = @0100;
  const int32 WM_KEYUP          = @0101;
  const int32 WM_CLOSE          = @0010;

  func CON(stdcall) boo GetMessageA(PTR[WindowMessage] message, WindowHandle handle, int32 filterMin, int32 filterMax) EXT;

  func CON(stdcall) boo UpdateWindow(WindowHandle handle) EXT;
  func CON(stdcall) boo TranslateMessage(PTR[WindowMessage] message) EXT;
  func CON(stdcall) int32 DispatchMessageA(PTR[WindowMessage] message) EXT;
  
  struct GlRenderContextHandle (ptr _unused);
  
  func CON(stdcall) GlRenderContextHandle wglCreateContext(DeviceContextHandle dch) EXT;
  func CON(stdcall) boo wglMakeCurrent(DeviceContextHandle dch, GlRenderContextHandle glRenderContextHandle) EXT;
  
  func CON(stdcall) boo SetPixelFormat(DeviceContextHandle dch, int32 format, PTR[PixelFormatDescriptor] pfd) EXT;
  
  struct DeviceContextHandle(ptr _unused);

  func CON(stdcall) DeviceContextHandle GetDC(WindowHandle handle) EXT;

  struct PixelFormatDescriptor (
    int16 size,
    int16 version,
    int32 flags,
    int8 pixelType,
    int8 colorBits,
    int8 redBits,
    int8 redShift,
    int8 greenBits,
    int8 greenShift,
    int8 blueBits,
    int8 blueShift,
    int8 alphaBits,
    int8 alphaShift,
    int8 accumBits,
    int8 accumRedBits,
    int8 accumGreenBits,
    int8 accumBlueBits,
    int8 accumAlphaBits,
    int8 depthBits,
    int8 stencilBits,
    int8 auxBuffers,
    int8 layerType,
    int8 reserved,
    int32 layerMask,
    int32 visibleMask,
    int32 damageMask
  );

  func int8 fc_PFD_TYPE_RGBA() {
    done cast[int8](0);
  }

  const int32 PFD_DRAW_TO_WINDOW          = @00000004;
  const int32 PFD_SUPPORT_OPENGL          = @00000020;

  func CON(stdcall) int32 ChoosePixelFormat(
    DeviceContextHandle dch,
    PTR[PixelFormatDescriptor] pfd
  ) EXT;


  func PixelFormatDescriptor new_PixelFormatDescriptor() {
    done PixelFormatDescriptor (
      size = cast[int16](0),
      version = cast[int16](0),
      flags = 0,
      pixelType = cast[int8](0),
      colorBits = cast[int8](0),
      redBits = cast[int8](0),
      redShift = cast[int8](0),
      greenBits = cast[int8](0),
      greenShift = cast[int8](0),
      blueBits = cast[int8](0),
      blueShift = cast[int8](0),
      alphaBits = cast[int8](0),
      alphaShift = cast[int8](0),
      accumBits = cast[int8](0),
      accumRedBits = cast[int8](0),
      accumGreenBits = cast[int8](0),
      accumBlueBits = cast[int8](0),
      accumAlphaBits = cast[int8](0),
      depthBits = cast[int8](0),
      stencilBits = cast[int8](0),
      auxBuffers = cast[int8](0),
      layerType = cast[int8](0),
      reserved = cast[int8](0),
      layerMask = 0,
      visibleMask = 0,
      damageMask = 0
    );
  }

}

package sus/System {

  use sus/native/Win;

  func sleep(int32 ms) {
    Win/Sleep(ms: ms);
  }

  func exit(int32 code) {
    Win/ExitProcess(code: code);
  }

  func print(PTR[int8] s) {
    print(s: s, length: Win/strnlen(buffer: s, size: 2147483647));
  }

  func print(PTR[int8] s, int32 length) {
    boo _r = Win/WriteFile(
	    file:       Win/GetStdHandle(handle: Win/STD_OUTPUT_HANDLE),
	    buffer:     s,
	    length:     length,
	    written:    RTP[PTR[int32]](0),
	    overlapped: RTP[PTR[ptr]](0)
	  );
  }

  func print(real32 r) {
    print(r: r, digits: 2);
  }

  func print(real32 r, int32 digits) {
    boo neg = r < 0.0;
    real32 digitMag = Win/powf(base: 10.0, power: cast[real32](digits));

    if (neg) r = 0.0 - r;

    int32 intPart = cast[int32](r);
    int32 decPart = cast[int32]((r - cast[real32](intPart)) * digitMag);

    if (neg) print(s: STR"-");
    print(i: intPart);

    if (digits > 0) {
      print(s: STR".");

      PTR[int8] buffer = ARR[int8](16);
      Win/_itoa_s(value: decPart, buffer: buffer, size: 16, radix: 10);
      int32 nonZeroCount = Win/strnlen(buffer: buffer, size: 16);
      
      int32 zeros = digits - nonZeroCount;
      while (zeros > 0) {
        print(s: STR"0");
        zeros = zeros - 1;
      }

      print(s: buffer);
    }
  }

  func print(int32 i) {
    PTR[int8] buffer = ARR[int8](16);
    Win/_itoa_s(value: i, buffer: buffer, size: 16, radix: 10);
    print(s: buffer);
  }

  func print(boo b) {
    if (b) print(s:STR"1");
    else print(s:STR"0");
  }

  func println(boo b) {
    if (b) print(s:STR"1\n");
    else print(s:STR"0\n");
  }

  func print(int32 i_0x) {
    PTR[int8] buffer = ARR[int8](16);
    Win/_itoa_s(value: i_0x, buffer: buffer, size: 16, radix: 16);
    print(s: buffer);
  }

  func println(int32 i_0x) {
    print(i_0x: i_0x);
    println();
  }

  func println(int32 i) {
    print(i: i);
    println();
  }

  func println(PTR[int8] s) {
    print(s: s);
    println();
  }

  func println() {
    print(s: STR"\n");
  }

}
