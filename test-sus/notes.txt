
ACTUALLY IMPLEMENTED
  - Top Level Statements
  - Functions
    - Parameters
    - External functions
    - calling conventions: sus, stdcall
  - Function pointers
  - Instructions
    - Local symbols
      - Initializing, Assigning
    - Asm instructions
    - Expressions
      - Operators: (arithmetics, refs, casts, size, bit manipulation), function calls, String literals, int32 literals
    - Branching
      - Conditions, Boo logic, done, break, While Loop
    - Blocks/Scopes
  - Type checking
  - Pointers
    - Arithmetic Referencing, Dereferencing, Assigning
  - Stack-Arrays
  - Multiple Files: Automatic build script generator
  - Packages: use statement, main statement
  - Fixed Arrays
  - Structures
    - Copying
      - Init: [x] Symbol
      - Assign: [x] Symbol, [x] Deref base, [x] Member chaining, [x] Struct member
    - Using members
      - Read member: [x] Symbol base, [x] Deref base, [x] Member chaining, [x] Struct member
      - Ref member: [x] Symbol base, [ ] Deref base

FEATURE EVALUATION
  - nice language features
    - packages
    - done and func syntax 
    - error locations
  - mixed blessings
    - brackets make type declarations and expression readable
    - stupid feature usage apparent because of capslock 3-letter keywords
    - no initialization code

BUGS
  - if scope is null (bc in static expression) some expression compilations result in js errors

ISSUES
  - code smellies
    - parser: inconsistant parsing naming and use of tryParse etc, always using eatSpace ...
    - compiler: compiler state should be used more, not addressScope, scope etc.
    - many redefinitions, repetition, methods not factored out
    - parser: weird global state and syntax "append"
    - context builder: to many arguments in functions, no clean context builder building state
  - annoying language features
    - DRF DRF DRF REF REF
    - RTP RTP RTP CAST
    - "struct not found", but no error location because of context builder
  - unmet requirements
    - only allow usage of local symbol after init
    - better error messages at unparsable statements
    - "use"-statement checks if package exist
    - naming collision checks: functions, consts etc.
    - streams
    - structure
      - no main block, only main method, string syntax sugar, compiler directives/macros
    - types
      - add unsigned types
      - add chars
      - "safe" strings

MISSING
  - Lambdas
  - Interfaces
  - Macros
  - Mogroft
    - World Generator
    - Matrices?
    - VAOs, VBOS?

QUESTION
  WHAT HAPPENS WHEN ASSIGNING ARRAY OUTSIDE OF IT'S SCOPE

NOTES FOR MAYBE

  lambdas
  interfaces
  generic types
  default parameters

ABSTRACT CONCEPTS/REQUIREMENT FOR ISSUES IN CODE, THEIR SOLUTIONS AS I KNOW
  functions:
    1 parameter, labeled, types
  types:
    issue at runtime, issue at compile-time, mixed
  fast code:
    avoid expensive features
    use caching
    use complex data structures
    use a complex algorithms
  fast programming
    use easy-to-use data structures


  architectural
    general: what types of requirements require code changes
      - new feature
        - kinds of features: user interface, 
        - levels of complexity

    general: what types of changes can code get
      - atomics:
        - crud object, crud property
          - example: new "person" object
          - example: new "name" property
        - crud function
          - example: new add function
        - crud function behaviour:
          - example: a function now divides "a" and "b", instead of adding "a" and "b".
        - crud function signature
          - example: 
      - complexities
        - data
          - new "entry"
              example: crafting recipe in minecraft.
          - new "entry" with handlers
              example: new entity in minecraft. the entity has a special "render" handler, because it looks unlike anything else.
          - new
        - code
    


  
  
NOTES FOR NEVER (DON'T EVER DO THIS!!!)

  auto types
  error/exception handling
  actual memory safety
  some fucking way to deal with lifetimes.
    move semantics
  initialization code for packages
  classes
  constructors / destructors
  preprocessor language / macros
  const/readonly type
  nicer pointer syntax
  different expression paradigm "stack"
  optimizations: inlining, assembly, expressions, ...
  multiple return values
  
  rambling section make it stop  make it stop  make it stop  make it stop  make it stop  make it stop  make it stop  

    for |start=0, end=5, |i| {
    }|

    macfunc for |start, end, default block|  {
      int32 i = start||;
      int32 e = end||;

      while(i < e) {
        block|i|
        i = e + i;
      }
    }

notes on assembly, topics:
  stack, stack frame, invoking functions
  arithmetic operations
  building
  linking
    subsystem: console/windows
    libraries
  syntax
    some commands expect a size when using an address, when they don't contain the register
  [>esp] should not be accessed
  calling conventions:
    - some registers need to be stored
  struct alignment
    

notes when i got started
  https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/itoa-s-itow-s?view=msvc-170
  https://stackoverflow.com/questions/15020621/what-is-between-esp-and-ebp
  https://stackoverflow.com/questions/35735403/writing-functions-in-assembler
  https://www.google.com/search?client=firefox-b-d&q=assembler+local+variables
  https://learn.microsoft.com/en-us/windows/console/getstdhandle
  https://en.wikipedia.org/wiki/X86_calling_conventions
  https://www.google.com/search?client=firefox-b-d&q=windows+asm+window+example
  https://sonictk.github.io/asm_tutorial/
  https://stackoverflow.com/questions/1023593/how-to-write-hello-world-in-assembly-under-windows
  https://stackoverflow.com/questions/40621744/how-are-windows-api-calls-made-on-assembly-level
  https://stackoverflow.com/questions/1658294/whats-the-purpose-of-the-lea-instruction