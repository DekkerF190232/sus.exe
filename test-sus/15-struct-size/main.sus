
package Main {

  use sus/native/Win;
  use sus/System;

  main {
    testCtrGet();
    
    # - ...struct.int8...
    # - ...struct.int16...
    # - ...DRF(struct).int8...
    # - ...DRF(struct).int16...
    #
    # - struct.int8 = ...
    # - struct.int16 = ...
    # - DRF(struct).int8 = ...
    # - DRF(struct).int16 = ...

    # - constructor

    System/exit(code: 0);
  }

  func testCtrGet() {
    Struct s = Struct(
      _1 = cast[int8](@77),
      _2 = cast[int8](@44),
      _3 = @1111
    );
    System/println(s: STR"expecting 77 44 1111:");
    printStructHex(s: REF(s));
    
    s._2 = cast[int8](@33);
    System/println(s: STR"expecting 77 33 1111:");
    printStructHex(s: REF(s));

    PTR[Struct] ps = REF(s);
    DRF(ps)._2 = cast[int8](@88);
    System/println(s: STR"expecting 77 33 1111:");
    printStructHex(s: REF(s));
  }

  func printStructHex(PTR[Struct] s) {
    System/print(i_0x: cast[int32](DRF(s)._1));
    System/print(s: STR" ");
    System/print(i_0x: cast[int32](DRF(s)._2));
    System/print(s: STR" ");
    System/println(i_0x: DRF(s)._3);
  }

  # unaligned: 6
  struct Struct(
    int8 _1,
    int8 _2,
    int32 _3
  );

  func testValueInt8() {
    Struct s = Struct(_1=cast[int8](0), _2=cast[int8](0), _3=0);
    System/print(s: STR"expecting 8:\n");
    System/print(s: STR"           :");
    System/print(i: size[Struct]());
  }

  #   changes:
	#   # test: primitive sizes
	#   # test: size operator
	#   # test: array creation size
	#   # test: struct layout:
	#   	# UPDATE: misunderstandings (see OglTest test.h) 
	#   	// https://learn.microsoft.com/en-us/cpp/preprocessor/pack?view=msvc-170
	#   	- sources: https://en.wikipedia.org/wiki/Data_structure_alignment
	#   	- follow microsoft rules https://learn.microsoft.com/en-us/cpp/c-language/padding-and-alignment-of-structure-members?view=msvc-170
	#   # test: local variables and parameters must use stack-aligned sizing function
	#   # todo: struct access below-4 byte members
	#   # todo: visit copy / todos
	#   	# to know: do padding areas need to be zeroed when calling another function?
	#   	# padding is not required to be zeroed
	#   - update size[type]() operator in *.sus
	#   - update ARR[type]() operator in *.sus

}
